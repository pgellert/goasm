// Code generated by command: go run asm.go -out add.s -stubs stub.go. DO NOT EDIT.

#include "textflag.h"

// func Add(x []uint64, y []uint64, z []uint64)
// Requires: AVX
TEXT Â·Add(SB), NOSPLIT, $0-72
	// Initialize base and length registers
	MOVQ x_len+8(FP), AX
	MOVQ x_base+0(FP), CX
	MOVQ y_base+24(FP), DX
	MOVQ z_base+48(FP), BX

	// Initialize index to 0
	XORQ SI, SI

loop_block:
	// Loop with AVX256 until less than 4 longs remain.
	CMPQ AX, $0x00
	JE   done
	CMPQ AX, $0x03
	JLE  loop_remains

	// Add z[i] = x[i] + y[i].
	VMOVUPD (CX)(SI*8), Y0
	VMOVUPD (DX)(SI*8), Y1
	VADDPD  Y0, Y1, Y0
	VMOVUPD Y0, (BX)(SI*8)
	ADDQ    $0x04, SI
	SUBQ    $0x04, AX
	JMP     loop_block

loop_remains:
	// Finish the remaining elements with normal 64bit operations
	XORQ DI, DI
	ADDQ (CX)(SI*8), DI
	ADDQ (DX)(SI*8), DI
	MOVQ DI, (BX)(SI*8)
	INCQ SI
	DECQ AX
	CMPQ AX, $0x00
	JNE  loop_remains

done:
	RET
